// рд╕рдЦреЗрддрд┐ рдорддреНрд╡рд╛ рдкреНрд░рд╕рднрдВ рдпрджреБрдХреНрддрдВ рд╣реЗ рдХреГрд╖реНрдг рд╣реЗ рдпрд╛рджрд╡ рд╣реЗ рд╕рдЦреЗрддрд┐ред
// рдЕрдЬрд╛рдирддрд╛ рдорд╣рд┐рдорд╛рдирдВ рддрд╡реЗрджрдВ рдордпрд╛ рдкреНрд░рдорд╛рджрд╛рддреНрдкреНрд░рдгрдпреЗрди рд╡рд╛рдкрд┐рее
// рдпрдЪреНрдЪрд╛рд╡рд╣рд╛рд╕рд╛рд░реНрдердорд╕рддреНрдХреГрддреЛрд╜рд╕рд┐ рд╡рд┐рд╣рд╛рд░рд╢рдпреНрдпрд╛рд╕рдирднреЛрдЬрдиреЗрд╖реБред
// рдПрдХреЛрд╜рдерд╡рд╛рдкреНрдпрдЪреНрдпреБрдд рддрддреНрд╕рдордХреНрд╖рдВ рддрддреНрдХреНрд╖рд╛рдордпреЗ рддреНрд╡рд╛рдорд╣рдордкреНрд░рдореЗрдпрдореНрее

package utils

import (
	"maps"
	"regexp"
	"slices"
	"strings"
)

type charMap = map[string]string

type langMap = struct {
	numbers    charMap
	vowels     charMap
	vowelSigns charMap
	consonants charMap
	misc       charMap
}

type langList = string

const (
	gu langList = "gu"
	sa langList = "sa"
	ml langList = "ml"
	or langList = "or"
	te langList = "te"
	kn langList = "kn"
	ta langList = "ta"
)

var charDict = map[langList]langMap{
	gu: {
		misc: charMap{
			"ред": ".",
			"рее": "..",
			"рк╜": "'",
			"рлР": "om",
		},
		numbers: charMap{
			"0": "рлж",
			"1": "рлз",
			"2": "рли",
			"3": "рлй",
			"4": "рлк",
			"5": "рлл",
			"6": "рлм",
			"7": "рлн",
			"8": "рло",
			"9": "рлп",
		},
		vowels: charMap{
			"a":  "ркЕ",
			"─Б":  "ркЖ",
			"i":  "ркЗ",
			"─л":  "ркИ",
			"u":  "ркЙ",
			"┼л":  "ркК",
			"с╣Ы":  "ркЛ",
			"с╣Э":  "рла",
			"с╕╖":  "ркМ",
			"с╕╣":  "рлб",
			"e":  "ркП",
			"ai": "ркР",
			"o":  "ркУ",
			"au": "ркФ",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "рк╛",
			"i":  "рк┐",
			"─л":  "рлА",
			"u":  "рлБ",
			"┼л":  "рлВ",
			"с╣Ы":  "рлГ",
			"с╣Э":  "рлД",
			"с╕╖":  "рлв",
			"с╕╣":  "рлг",
			"e":  "рлЗ",
			"ai": "рлИ",
			"o":  "рлЛ",
			"au": "рлМ",
			"с╣Г":  "ркВ",
			"с╕е":  "ркГ",
			"├г":  "ркБ",
			"-":  "рлН",
		},
		consonants: charMap{
			"k":  "ркХ",
			"kh": "ркЦ",
			"g":  "ркЧ",
			"gh": "ркШ",
			"с╣Е":  "ркЩ",
			"c":  "ркЪ",
			"ch": "ркЫ",
			"j":  "ркЬ",
			"jh": "ркЭ",
			"├▒":  "ркЮ",
			"с╣н":  "ркЯ",
			"с╣нh": "рка",
			"с╕Н":  "ркб",
			"с╕Нh": "ркв",
			"с╣З":  "ркг",
			"t":  "ркд",
			"th": "рке",
			"d":  "ркж",
			"dh": "ркз",
			"n":  "рки",
			"p":  "ркк",
			"ph": "ркл",
			"b":  "ркм",
			"bh": "ркн",
			"m":  "рко",
			"y":  "ркп",
			"r":  "рк░",
			"l":  "рк▓",
			"v":  "рк╡",
			"┼Ы":  "рк╢",
			"с╣г":  "рк╖",
			"s":  "рк╕",
			"h":  "рк╣",
			"с╕╗":  "рк│",
		},
	},
	ta: {
		misc: charMap{
			"ред": ".",
			"рее": "..",
			"ЁСМ╜": "'",
			"ЁСНР": "om",
		},
		numbers: charMap{
			"0": "рпж",
			"1": "рпз",
			"2": "рпи",
			"3": "рпй",
			"4": "рпк",
			"5": "рпл",
			"6": "рпм",
			"7": "рпн",
			"8": "рпо",
			"9": "рпп",
		},
		vowels: charMap{
			"a":  "ЁСМЕ",
			"─Б":  "ЁСМЖ",
			"i":  "ЁСМЗ",
			"─л":  "ЁСМИ",
			"u":  "ЁСМЙ",
			"┼л":  "ЁСМК",
			"с╣Ы":  "ЁСМЛ",
			"с╣Э":  "ЁСНа",
			"с╕╖":  "ЁСММ",
			"с╕╣":  "ЁСНб",
			"e":  "ЁСМП",
			"ai": "ЁСМР",
			"o":  "ЁСМУ",
			"au": "ЁСМФ",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "ЁСМ╛",
			"i":  "ЁСМ┐",
			"─л":  "ЁСНА",
			"u":  "ЁСНБ",
			"┼л":  "ЁСНВ",
			"с╣Ы":  "ЁСНГ",
			"с╣Э":  "ЁСНД",
			"с╕╖":  "ЁСНв",
			"с╕╣":  "ЁСНг",
			"e":  "ЁСНЗ",
			"ai": "ЁСНИ",
			"o":  "ЁСНЛ",
			"au": "ЁСНЧ",
			"с╣Г":  "ЁСМВ",
			"с╕е":  "ЁСМГ",
			"├г":  "ЁСМБ",
			"-":  "ЁСНН",
		},
		consonants: charMap{
			"k":  "ЁСМХ",
			"kh": "ЁСМЦ",
			"g":  "ЁСМЧ",
			"gh": "ЁСМШ",
			"с╣Е":  "ЁСМЩ",
			"c":  "ЁСМЪ",
			"ch": "ЁСМЫ",
			"j":  "ЁСМЬ",
			"jh": "ЁСМЭ",
			"├▒":  "ЁСМЮ",
			"с╣н":  "ЁСМЯ",
			"с╣нh": "ЁСМа",
			"с╕Н":  "ЁСМб",
			"с╕Нh": "ЁСМв",
			"с╣З":  "ЁСМг",
			"t":  "ЁСМд",
			"th": "ЁСМе",
			"d":  "ЁСМж",
			"dh": "ЁСМз",
			"n":  "ЁСМи",
			"p":  "ЁСМк",
			"ph": "ЁСМл",
			"b":  "ЁСМм",
			"bh": "ЁСМн",
			"m":  "ЁСМо",
			"y":  "ЁСМп",
			"r":  "ЁСМ░",
			"l":  "ЁСМ▓",
			"v":  "ЁСМ╡",
			"┼Ы":  "ЁСМ╢",
			"с╣г":  "ЁСМ╖",
			"s":  "ЁСМ╕",
			"h":  "ЁСМ╣",
			"с╕╗":  "ЁСМ│",
		},
	},
	ml: {
		misc: charMap{
			"ред":  ".",
			"рее":  "..",
			"р┤╜":  "'",
			"р┤Ур┤В": "om",
		},
		numbers: charMap{
			"0": "р╡ж",
			"1": "р╡з",
			"2": "р╡и",
			"3": "р╡й",
			"4": "р╡к",
			"5": "р╡л",
			"6": "р╡м",
			"7": "р╡н",
			"8": "р╡о",
			"9": "р╡п",
		},
		vowels: charMap{
			"a":  "р┤Е",
			"─Б":  "р┤Ж",
			"i":  "р┤З",
			"─л":  "р┤И",
			"u":  "р┤Й",
			"┼л":  "р┤К",
			"с╣Ы":  "р┤Л",
			"с╣Э":  "р╡а",
			"с╕╖":  "р┤М",
			"с╕╣":  "р╡б",
			"e":  "р┤О",
			"ai": "р┤Р",
			"o":  "р┤Т",
			"au": "р┤Ф",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "р┤╛",
			"i":  "р┤┐",
			"─л":  "р╡А",
			"u":  "р╡Б",
			"┼л":  "р╡В",
			"с╣Ы":  "р╡Г",
			"с╣Э":  "р╡Д",
			"с╕╖":  "р╡в",
			"с╕╣":  "р╡г",
			"e":  "р╡Ж",
			"ai": "р╡И",
			"o":  "р╡К",
			"au": "р╡Ч",
			"с╣Г":  "р┤В",
			"с╕е":  "р┤Г",
			"├г":  "р┤Б",
			"-":  "р╡Н",
		},
		consonants: charMap{
			"k":  "р┤Х",
			"kh": "р┤Ц",
			"g":  "р┤Ч",
			"gh": "р┤Ш",
			"с╣Е":  "р┤Щ",
			"c":  "р┤Ъ",
			"ch": "р┤Ы",
			"j":  "р┤Ь",
			"jh": "р┤Э",
			"├▒":  "р┤Ю",
			"с╣н":  "р┤Я",
			"с╣нh": "р┤а",
			"с╕Н":  "р┤б",
			"с╕Нh": "р┤в",
			"с╣З":  "р┤г",
			"t":  "р┤д",
			"th": "р┤е",
			"d":  "р┤ж",
			"dh": "р┤з",
			"n":  "р┤и",
			"p":  "р┤к",
			"ph": "р┤л",
			"b":  "р┤м",
			"bh": "р┤н",
			"m":  "р┤о",
			"y":  "р┤п",
			"r":  "р┤░",
			"l":  "р┤▓",
			"v":  "р┤╡",
			"┼Ы":  "р┤╢",
			"с╣г":  "р┤╖",
			"s":  "р┤╕",
			"h":  "р┤╣",
			"с╕╗":  "р┤│",
		},
	},
	te: {
		misc: charMap{
			"ред":  ".",
			"рее":  "..",
			"р░╜":  "'",
			"р░Ур░В": "om",
		},
		numbers: charMap{
			"0": "р▒ж",
			"1": "р▒з",
			"2": "р▒и",
			"3": "р▒й",
			"4": "р▒к",
			"5": "р▒л",
			"6": "р▒м",
			"7": "р▒н",
			"8": "р▒о",
			"9": "р▒п",
		},
		vowels: charMap{
			"a":  "р░Е",
			"─Б":  "р░Ж",
			"i":  "р░З",
			"─л":  "р░И",
			"u":  "р░Й",
			"┼л":  "р░К",
			"с╣Ы":  "р░Л",
			"с╣Э":  "р▒а",
			"с╕╖":  "р░М",
			"с╕╣":  "р▒б",
			"e":  "р░О",
			"ai": "р░Р",
			"o":  "р░Т",
			"au": "р░Ф",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "р░╛",
			"i":  "р░┐",
			"─л":  "р▒А",
			"u":  "р▒Б",
			"┼л":  "р▒В",
			"с╣Ы":  "р▒Г",
			"с╣Э":  "р▒Д",
			"с╕╖":  "р▒в",
			"с╕╣":  "р▒г",
			"e":  "р▒Ж",
			"ai": "р▒И",
			"o":  "р▒К",
			"au": "р▒М",
			"с╣Г":  "р░В",
			"с╕е":  "р░Г",
			"├г":  "р░Б",
			"-":  "р▒Н",
		},
		consonants: charMap{
			"k":  "р░Х",
			"kh": "р░Ц",
			"g":  "р░Ч",
			"gh": "р░Ш",
			"с╣Е":  "р░Щ",
			"c":  "р░Ъ",
			"ch": "р░Ы",
			"j":  "р░Ь",
			"jh": "р░Э",
			"├▒":  "р░Ю",
			"с╣н":  "р░Я",
			"с╣нh": "р░а",
			"с╕Н":  "р░б",
			"с╕Нh": "р░в",
			"с╣З":  "р░г",
			"t":  "р░д",
			"th": "р░е",
			"d":  "р░ж",
			"dh": "р░з",
			"n":  "р░и",
			"p":  "р░к",
			"ph": "р░л",
			"b":  "р░м",
			"bh": "р░н",
			"m":  "р░о",
			"y":  "р░п",
			"r":  "р░░",
			"l":  "р░▓",
			"v":  "р░╡",
			"┼Ы":  "р░╢",
			"с╣г":  "р░╖",
			"s":  "р░╕",
			"h":  "р░╣",
			"с╕╗":  "р░│",
		},
	},
	kn: {
		misc: charMap{
			"ред":  ".",
			"рее":  "..",
			"р▓╜":  "'",
			"р▓Ур▓В": "om",
		},
		numbers: charMap{
			"0": "р│ж",
			"1": "р│з",
			"2": "р│и",
			"3": "р│й",
			"4": "р│к",
			"5": "р│л",
			"6": "р│м",
			"7": "р│н",
			"8": "р│о",
			"9": "р│п",
		},
		vowels: charMap{
			"a":  "р▓Е",
			"─Б":  "р▓Ж",
			"i":  "р▓З",
			"─л":  "р▓И",
			"u":  "р▓Й",
			"┼л":  "р▓К",
			"с╣Ы":  "р▓Л",
			"с╣Э":  "р│а",
			"с╕╖":  "р▓М",
			"с╕╣":  "р│б",
			"e":  "р▓О",
			"ai": "р▓Р",
			"o":  "р▓Т",
			"au": "р▓Ф",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "р▓╛",
			"i":  "р▓┐",
			"─л":  "р│А",
			"u":  "р│Б",
			"┼л":  "р│В",
			"с╣Ы":  "р│Г",
			"с╣Э":  "р│Д",
			"с╕╖":  "р│в",
			"с╕╣":  "р│г",
			"e":  "р│Ж",
			"ai": "р│И",
			"o":  "р│К",
			"au": "р│М",
			"с╣Г":  "р▓В",
			"с╕е":  "р▓Г",
			"├г":  "р▓Б",
			"-":  "р│Н",
		},
		consonants: charMap{
			"k":  "р▓Х",
			"kh": "р▓Ц",
			"g":  "р▓Ч",
			"gh": "р▓Ш",
			"с╣Е":  "р▓Щ",
			"c":  "р▓Ъ",
			"ch": "р▓Ы",
			"j":  "р▓Ь",
			"jh": "р▓Э",
			"├▒":  "р▓Ю",
			"с╣н":  "р▓Я",
			"с╣нh": "р▓а",
			"с╕Н":  "р▓б",
			"с╕Нh": "р▓в",
			"с╣З":  "р▓г",
			"t":  "р▓д",
			"th": "р▓е",
			"d":  "р▓ж",
			"dh": "р▓з",
			"n":  "р▓и",
			"p":  "р▓к",
			"ph": "р▓л",
			"b":  "р▓м",
			"bh": "р▓н",
			"m":  "р▓о",
			"y":  "р▓п",
			"r":  "р▓░",
			"l":  "р▓▓",
			"v":  "р▓╡",
			"┼Ы":  "р▓╢",
			"с╣г":  "р▓╖",
			"s":  "р▓╕",
			"h":  "р▓╣",
			"с╕╗":  "р▓│",
		},
	},
	or: {
		misc: charMap{
			"ред":  ".",
			"рее":  "..",
			"рм╜":  "'",
			"рмУрмБ": "om",
		},
		numbers: charMap{
			"0": "рнж",
			"1": "рнз",
			"2": "рни",
			"3": "рнй",
			"4": "рнк",
			"5": "рнл",
			"6": "рнм",
			"7": "рнн",
			"8": "рно",
			"9": "рнп",
		},
		vowels: charMap{
			"a":  "рмЕ",
			"─Б":  "рмЖ",
			"i":  "рмЗ",
			"─л":  "рмИ",
			"u":  "рмЙ",
			"┼л":  "рмК",
			"с╣Ы":  "рмЛ",
			"с╣Э":  "рна",
			"с╕╖":  "рмМ",
			"с╕╣":  "рнб",
			"e":  "рмП",
			"ai": "рмР",
			"o":  "рмУ",
			"au": "рмФ",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "рм╛",
			"i":  "рм┐",
			"─л":  "рнА",
			"u":  "рнБ",
			"┼л":  "рнВ",
			"с╣Ы":  "рнГ",
			"с╣Э":  "рнД",
			"с╕╖":  "рнв",
			"с╕╣":  "рнг",
			"e":  "рнЗ",
			"ai": "рнИ",
			"o":  "рнЛ",
			"au": "рнМ",
			"с╣Г":  "рмВ",
			"с╕е":  "рмГ",
			"├г":  "рмБ",
			"-":  "рнН",
		},
		consonants: charMap{
			"k":  "рмХ",
			"kh": "рмЦ",
			"g":  "рмЧ",
			"gh": "рмШ",
			"с╣Е":  "рмЩ",
			"c":  "рмЪ",
			"ch": "рмЫ",
			"j":  "рмЬ",
			"jh": "рмЭ",
			"├▒":  "рмЮ",
			"с╣н":  "рмЯ",
			"с╣нh": "рма",
			"с╕Н":  "рмб",
			"с╕Нh": "рмв",
			"с╣З":  "рмг",
			"t":  "рмд",
			"th": "рме",
			"d":  "рмж",
			"dh": "рмз",
			"n":  "рми",
			"p":  "рмк",
			"ph": "рмл",
			"b":  "рмм",
			"bh": "рмн",
			"m":  "рмо",
			"y":  "рнЯ",
			"r":  "рм░",
			"l":  "рм▓",
			"v":  "рн▒",
			"┼Ы":  "рм╢",
			"с╣г":  "рм╖",
			"s":  "рм╕",
			"h":  "рм╣",
			"с╕╗":  "рм│",
		},
	},
	sa: {
		misc: charMap{
			"ред": ".",
			"рее": "..",
			"рд╜": "'",
			"реР": "om",
		},
		numbers: charMap{
			"0": "реж",
			"1": "рез",
			"2": "реи",
			"3": "рей",
			"4": "рек",
			"5": "рел",
			"6": "рем",
			"7": "рен",
			"8": "рео",
			"9": "реп",
		},
		vowels: charMap{
			"a":  "рдЕ",
			"─Б":  "рдЖ",
			"i":  "рдЗ",
			"─л":  "рдИ",
			"u":  "рдЙ",
			"┼л":  "рдК",
			"с╣Ы":  "рдЛ",
			"с╣Э":  "реа",
			"с╕╖":  "рдМ",
			"с╕╣":  "реб",
			"e":  "рдП",
			"ai": "рдР",
			"o":  "рдУ",
			"au": "рдФ",
		},
		vowelSigns: charMap{
			"a":  "",
			"─Б":  "рд╛",
			"i":  "рд┐",
			"─л":  "реА",
			"u":  "реБ",
			"┼л":  "реВ",
			"с╣Ы":  "реГ",
			"с╣Э":  "реД",
			"с╕╖":  "рев",
			"с╕╣":  "рег",
			"e":  "реЗ",
			"ai": "реИ",
			"o":  "реЛ",
			"au": "реМ",
			"с╣Г":  "рдВ",
			"с╕е":  "рдГ",
			"├г":  "рдБ",
			"-":  "реН",
		},
		consonants: charMap{
			"k":  "рдХ",
			"kh": "рдЦ",
			"g":  "рдЧ",
			"gh": "рдШ",
			"с╣Е":  "рдЩ",
			"c":  "рдЪ",
			"ch": "рдЫ",
			"j":  "рдЬ",
			"jh": "рдЭ",
			"├▒":  "рдЮ",
			"с╣н":  "рдЯ",
			"с╣нh": "рда",
			"с╕Н":  "рдб",
			"с╕Нh": "рдв",
			"с╣З":  "рдг",
			"t":  "рдд",
			"th": "рде",
			"d":  "рдж",
			"dh": "рдз",
			"n":  "рди",
			"p":  "рдк",
			"ph": "рдл",
			"b":  "рдм",
			"bh": "рдн",
			"m":  "рдо",
			"y":  "рдп",
			"r":  "рд░",
			"l":  "рд▓",
			"v":  "рд╡",
			"┼Ы":  "рд╢",
			"с╣г":  "рд╖",
			"s":  "рд╕",
			"h":  "рд╣",
			"с╕╗":  "рд│",
		},
	},
}

var unicodeMap = charMap{
	"a":  "─Б",
	"i":  "─л",
	"u":  "┼л",
	"r":  "с╣Ы",
	"ru": "с╣Э",
	"l":  "с╕╖",
	"lu": "с╕╣",
	"ll": "с╕╗",
	"t":  "с╣н",
	"d":  "с╕Н",
	"m":  "с╣Г",
	"h":  "с╕е",
	"n":  "├▒",
	"nu": "с╣Е",
	"nl": "с╣З",
	"su": "┼Ы",
	"sl": "с╣г",
	".":  "ред",
	"..": "рее",
	"au": "├г",
}

var devan─Бgar─лDataDict = charMap{
	"рдХ": "k",
	"рдЦ": "kh",
	"рдЧ": "g",
	"рдШ": "gh",
	"рдЩ": "/nu/",
	"рдЪ": "c",
	"рдЫ": "ch",
	"рдЬ": "j",
	"рдЭ": "jh",
	"рдЮ": "/n/",
	"рдЯ": "/t/",
	"рда": "/t/h",
	"рдб": "/d/",
	"рдв": "/d/h",
	"рдг": "/nl/",
	"рдд": "t",
	"рде": "th",
	"рдж": "d",
	"рдз": "dh",
	"рди": "n",
	"рдк": "p",
	"рдл": "ph",
	"рдм": "b",
	"рдн": "bh",
	"рдо": "m",
	"рдп": "y",
	"рд░": "r",
	"рд▓": "l",
	"рд╡": "v",
	"рд╢": "/su/",
	"рд╖": "/sl/",
	"рд╕": "s",
	"рд╣": "h",
	"рд│": "/ll/",
	"рдЕ": "a",
	"рдЖ": "/a/",
	"рдЗ": "i",
	"рдИ": "/i/",
	"рдЙ": "u",
	"рдК": "/u/",
	"рдЛ": "/r/",
	"реа": "/ru/",
	"рдМ": "/l/",
	"реб": "/lu/",
	"рдП": "e",
	"рдР": "ai",
	"рдУ": "o",
	"рдФ": "au",
	"":  "a",
	"рд╛": "/a/",
	"рд┐": "i",
	"реА": "/i/",
	"реБ": "u",
	"реВ": "/u/",
	"реГ": "/r/",
	"реД": "/ru/",
	"рев": "/l/",
	"рег": "/lu/",
	"реЗ": "e",
	"реИ": "ai",
	"реЛ": "o",
	"реМ": "au",
	"рдВ": "/m/",
	"рдГ": "/h/",
	"рдБ": "/au/",
	"реН": "-",
	"рд╜": "\\/'/\\",
	"ред": "\\/./\\",
	"рее": "\\/../\\",
	"реР": "\\/om/\\",
	"реж": "\\0\\",
	"рез": "\\1\\",
	"реи": "\\2\\",
	"рей": "\\3\\",
	"рек": "\\4\\",
	"рел": "\\5\\",
	"рем": "\\6\\",
	"рен": "\\7\\",
	"рео": "\\8\\",
	"реп": "\\9\\",
}

var iastDataDict = charMap{
	"реж": "0",
	"рез": "1",
	"реи": "2",
	"рей": "3",
	"рек": "4",
	"рел": "5",
	"рем": "6",
	"рен": "7",
	"рео": "8",
	"реп": "9",
	"─Б": "a",
	"─л": "i",
	"┼л": "u",
	"с╣Ы": "r",
	"с╣Э": "ru",
	"с╕╖": "l",
	"с╕╣": "lu",
	"с╕╗": "ll",
	"с╣н": "t",
	"с╕Н": "d",
	"с╣Г": "m",
	"с╕е": "h",
	"├▒": "n",
	"с╣Е": "nu",
	"с╣З": "nl",
	"┼Ы": "su",
	"с╣г": "sl",
	"рд╜": "'",
	"ред": ".",
	"рее": "..",
	"├г": "au",
}

var unAspiratedConsonants = []string{
	"b",
	"c",
	"d",
	"g",
	"j",
	"k",
	"p",
	"t",
	"с╕Н",
	"с╣н",
}

var allowedSymbols = []string{
	"!",
	"\"",
	"(",
	")",
	",",
	"-",
	":",
	"=",
	"?",
	"|",
}

var slpDataDict = charMap{
	"a": "a",
	"A": "─Б",
	"i": "i",
	"I": "─л",
	"u": "u",
	"U": "┼л",
	"e": "e",
	"E": "ai",
	"o": "o",
	"O": "au",
	"f": "с╣Ы",
	"F": "с╣Э",
	"x": "с╕╖",
	"X": "с╕╣",
	"L": "с╕╗",
	"|": "с╕╗h",
	"k": "k",
	"K": "kh",
	"g": "g",
	"G": "gh",
	"N": "с╣Е",
	"c": "c",
	"C": "ch",
	"j": "j",
	"J": "jh",
	"Y": "├▒",
	"w": "с╣н",
	"W": "с╣нh",
	"q": "с╕Н",
	"Q": "с╕Нh",
	"R": "с╣З",
	"t": "t",
	"T": "th",
	"d": "d",
	"D": "dh",
	"n": "n",
	"p": "p",
	"P": "ph",
	"b": "b",
	"B": "bh",
	"m": "m",
	"M": "с╣Г",
	"H": "с╕е",
	"y": "y",
	"r": "r",
	"l": "l",
	"v": "v",
	"S": "┼Ы",
	"z": "с╣г",
	"s": "s",
	"h": "h",
	"'": "'",
	"~": "├г",
}

var iastAllowed = []string{
	"-",
	"a",
	"ai",
	"au",
	"b",
	"bh",
	"c",
	"ch",
	"d",
	"dh",
	"e",
	"g",
	"gh",
	"h",
	"i",
	"j",
	"jh",
	"k",
	"kh",
	"l",
	"m",
	"n",
	"o",
	"p",
	"ph",
	"r",
	"s",
	"t",
	"th",
	"u",
	"v",
	"y",
	"├г",
	"├▒",
	"─Б",
	"─л",
	"┼Ы",
	"┼л",
	"рд╜",
	"реР",
	"ред",
	"рее",
	"реж",
	"рез",
	"реи",
	"рей",
	"рек",
	"рел",
	"рем",
	"рен",
	"рео",
	"реп",
	"с╕Н",
	"с╕Нh",
	"с╕е",
	"с╕╖",
	"с╕╣",
	"с╕╗",
	"с╣Г",
	"с╣Е",
	"с╣З",
	"с╣Ы",
	"с╣Э",
	"с╣г",
	"с╣н",
	"с╣нh",
}

// Function to map special characters to Unicode
func createHandleUnicode(lang langList) func(string) string {
	langDict := charMap{}

	maps.Copy(langDict, unicodeMap)

	switch lang {
	case gu:
		maps.Copy(
			langDict,
			charMap{
				"om": "рлР",
				"'":  "рк╜",
			},
		)
	case sa:
		maps.Copy(
			langDict,
			charMap{
				"om": "реР",
				"'":  "рд╜",
			},
		)
	case or:
		maps.Copy(
			langDict,
			charMap{
				"om": "рмУрмБ",
				"'":  "рм╜",
			},
		)
	case kn:
		maps.Copy(
			langDict,
			charMap{
				"om": "р▓Ур▓В",
				"'":  "р▓╜",
			},
		)
	case te:
		maps.Copy(
			langDict,
			charMap{
				"'":  "р░╜",
				"om": "р░Ур░В",
			},
		)
	case ml:
		maps.Copy(
			langDict,
			charMap{
				"'":  "р┤╜",
				"om": "р┤Ур┤В",
			},
		)
	case ta:
		maps.Copy(
			langDict,
			charMap{
				"'":  "ЁСМ╜",
				"om": "ЁСНР",
			},
		)
	default:
		panic("Unhandled case")
	}

	return func(uast string) string {
		var str []string

		for _, v := range strings.Trim(strings.ToLower(uast), "\\") {
			str = append(str, string(v))
		}

		var arr []string

		for i := 0; i < len(str); i++ {
			curr := str[i]

			if curr == "/" {
				var char []string

				for j := i + 1; j < len(str); j++ {
					curr := str[j]
					if curr == "/" {
						i = j
						break
					}

					if j == len(str)-1 {
						i = j
					}

					char = append(char, curr)
				}

				if v, ok := langDict[strings.Join(char, "")]; ok {
					arr = append(arr, v)
				}

				continue
			}

			arr = append(arr, curr)
		}

		return strings.Join(arr, "")
	}
}

// script to devan─Бgar─л
var devan─Бgar─лScriptDict = map[langList]charMap{
	gu: {
		"ред": "ред",
		"рее": "рее",
		"рк╜": "рд╜",
		"рлР": "реР",
		"рлж": "реж",
		"рлз": "рез",
		"рли": "реи",
		"рлй": "рей",
		"рлк": "рек",
		"рлл": "рел",
		"рлм": "рем",
		"рлн": "рен",
		"рло": "рео",
		"рлп": "реп",
		"ркЕ": "рдЕ",
		"ркЖ": "рдЖ",
		"ркЗ": "рдЗ",
		"ркИ": "рдИ",
		"ркЙ": "рдЙ",
		"ркК": "рдК",
		"ркЛ": "рдЛ",
		"рла": "реа",
		"ркМ": "рдМ",
		"рлб": "реб",
		"ркП": "рдП",
		"ркР": "рдР",
		"ркУ": "рдУ",
		"ркФ": "рдФ",
		"рк╛": "рд╛",
		"рк┐": "рд┐",
		"рлА": "реА",
		"рлБ": "реБ",
		"рлВ": "реВ",
		"рлГ": "реГ",
		"рлД": "реД",
		"рлв": "рев",
		"рлг": "рег",
		"рлЗ": "реЗ",
		"рлИ": "реИ",
		"рлЛ": "реЛ",
		"рлМ": "реМ",
		"ркВ": "рдВ",
		"ркГ": "рдГ",
		"ркБ": "рдБ",
		"рлН": "реН",
		"ркХ": "рдХ",
		"ркЦ": "рдЦ",
		"ркЧ": "рдЧ",
		"ркШ": "рдШ",
		"ркЩ": "рдЩ",
		"ркЪ": "рдЪ",
		"ркЫ": "рдЫ",
		"ркЬ": "рдЬ",
		"ркЭ": "рдЭ",
		"ркЮ": "рдЮ",
		"ркЯ": "рдЯ",
		"рка": "рда",
		"ркб": "рдб",
		"ркв": "рдв",
		"ркг": "рдг",
		"ркд": "рдд",
		"рке": "рде",
		"ркж": "рдж",
		"ркз": "рдз",
		"рки": "рди",
		"ркк": "рдк",
		"ркл": "рдл",
		"ркм": "рдм",
		"ркн": "рдн",
		"рко": "рдо",
		"ркп": "рдп",
		"рк░": "рд░",
		"рк▓": "рд▓",
		"рк╡": "рд╡",
		"рк╢": "рд╢",
		"рк╖": "рд╖",
		"рк╕": "рд╕",
		"рк╣": "рд╣",
		"рк│": "рд│",
	},
	or: {
		"ред":  "ред",
		"рее":  "рее",
		"рм╜":  "рд╜",
		"рмУрмБ": "реР",
		"рнж":  "реж",
		"рнз":  "рез",
		"рни":  "реи",
		"рнй":  "рей",
		"рнк":  "рек",
		"рнл":  "рел",
		"рнм":  "рем",
		"рнн":  "рен",
		"рно":  "рео",
		"рнп":  "реп",
		"рмЕ":  "рдЕ",
		"рмЖ":  "рдЖ",
		"рмЗ":  "рдЗ",
		"рмИ":  "рдИ",
		"рмЙ":  "рдЙ",
		"рмК":  "рдК",
		"рмЛ":  "рдЛ",
		"рна":  "реа",
		"рмМ":  "рдМ",
		"рнб":  "реб",
		"рмП":  "рдП",
		"рмР":  "рдР",
		"рмУ":  "рдУ",
		"рмФ":  "рдФ",
		"рм╛":  "рд╛",
		"рм┐":  "рд┐",
		"рнА":  "реА",
		"рнБ":  "реБ",
		"рнВ":  "реВ",
		"рнГ":  "реГ",
		"рнД":  "реД",
		"рнв":  "рев",
		"рнг":  "рег",
		"рнЗ":  "реЗ",
		"рнИ":  "реИ",
		"рнЛ":  "реЛ",
		"рнМ":  "реМ",
		"рмВ":  "рдВ",
		"рмГ":  "рдГ",
		"рмБ":  "рдБ",
		"рнН":  "реН",
		"рмХ":  "рдХ",
		"рмЦ":  "рдЦ",
		"рмЧ":  "рдЧ",
		"рмШ":  "рдШ",
		"рмЩ":  "рдЩ",
		"рмЪ":  "рдЪ",
		"рмЫ":  "рдЫ",
		"рмЬ":  "рдЬ",
		"рмЭ":  "рдЭ",
		"рмЮ":  "рдЮ",
		"рмЯ":  "рдЯ",
		"рма":  "рда",
		"рмб":  "рдб",
		"рмв":  "рдв",
		"рмг":  "рдг",
		"рмд":  "рдд",
		"рме":  "рде",
		"рмж":  "рдж",
		"рмз":  "рдз",
		"рми":  "рди",
		"рмк":  "рдк",
		"рмл":  "рдл",
		"рмм":  "рдм",
		"рмн":  "рдн",
		"рмо":  "рдо",
		"рнЯ":  "рдп",
		"рм░":  "рд░",
		"рм▓":  "рд▓",
		"рн▒":  "рд╡",
		"рм╢":  "рд╢",
		"рм╖":  "рд╖",
		"рм╕":  "рд╕",
		"рм╣":  "рд╣",
		"рм│":  "рд│",
	},
	kn: {
		"ред":  "ред",
		"рее":  "рее",
		"р▓╜":  "рд╜",
		"р▓Ур▓В": "реР",
		"р│ж":  "реж",
		"р│з":  "рез",
		"р│и":  "реи",
		"р│й":  "рей",
		"р│к":  "рек",
		"р│л":  "рел",
		"р│м":  "рем",
		"р│н":  "рен",
		"р│о":  "рео",
		"р│п":  "реп",
		"р▓Е":  "рдЕ",
		"р▓Ж":  "рдЖ",
		"р▓З":  "рдЗ",
		"р▓И":  "рдИ",
		"р▓Й":  "рдЙ",
		"р▓К":  "рдК",
		"р▓Л":  "рдЛ",
		"р│а":  "реа",
		"р▓М":  "рдМ",
		"р│б":  "реб",
		"р▓О":  "рдП",
		"р▓Р":  "рдР",
		"р▓Т":  "рдУ",
		"р▓Ф":  "рдФ",
		"р▓╛":  "рд╛",
		"р▓┐":  "рд┐",
		"р│А":  "реА",
		"р│Б":  "реБ",
		"р│В":  "реВ",
		"р│Г":  "реГ",
		"р│Д":  "реД",
		"р│в":  "рев",
		"р│г":  "рег",
		"р│Ж":  "реЗ",
		"р│И":  "реИ",
		"р│К":  "реЛ",
		"р│М":  "реМ",
		"р▓В":  "рдВ",
		"р▓Г":  "рдГ",
		"р▓Б":  "рдБ",
		"р│Н":  "реН",
		"р▓Х":  "рдХ",
		"р▓Ц":  "рдЦ",
		"р▓Ч":  "рдЧ",
		"р▓Ш":  "рдШ",
		"р▓Щ":  "рдЩ",
		"р▓Ъ":  "рдЪ",
		"р▓Ы":  "рдЫ",
		"р▓Ь":  "рдЬ",
		"р▓Э":  "рдЭ",
		"р▓Ю":  "рдЮ",
		"р▓Я":  "рдЯ",
		"р▓а":  "рда",
		"р▓б":  "рдб",
		"р▓в":  "рдв",
		"р▓г":  "рдг",
		"р▓д":  "рдд",
		"р▓е":  "рде",
		"р▓ж":  "рдж",
		"р▓з":  "рдз",
		"р▓и":  "рди",
		"р▓к":  "рдк",
		"р▓л":  "рдл",
		"р▓м":  "рдм",
		"р▓н":  "рдн",
		"р▓о":  "рдо",
		"р▓п":  "рдп",
		"р▓░":  "рд░",
		"р▓▓":  "рд▓",
		"р▓╡":  "рд╡",
		"р▓╢":  "рд╢",
		"р▓╖":  "рд╖",
		"р▓╕":  "рд╕",
		"р▓╣":  "рд╣",
		"р▓│":  "рд│",
	},
	te: {
		"ред":  "ред",
		"рее":  "рее",
		"р░╜":  "рд╜",
		"р░Ур░В": "реР",
		"р▒ж":  "реж",
		"р▒з":  "рез",
		"р▒и":  "реи",
		"р▒й":  "рей",
		"р▒к":  "рек",
		"р▒л":  "рел",
		"р▒м":  "рем",
		"р▒н":  "рен",
		"р▒о":  "рео",
		"р▒п":  "реп",
		"р░Е":  "рдЕ",
		"р░Ж":  "рдЖ",
		"р░З":  "рдЗ",
		"р░И":  "рдИ",
		"р░Й":  "рдЙ",
		"р░К":  "рдК",
		"р░Л":  "рдЛ",
		"р▒а":  "реа",
		"р░М":  "рдМ",
		"р▒б":  "реб",
		"р░О":  "рдП",
		"р░Р":  "рдР",
		"р░Т":  "рдУ",
		"р░Ф":  "рдФ",
		"р░╛":  "рд╛",
		"р░┐":  "рд┐",
		"р▒А":  "реА",
		"р▒Б":  "реБ",
		"р▒В":  "реВ",
		"р▒Г":  "реГ",
		"р▒Д":  "реД",
		"р▒в":  "рев",
		"р▒г":  "рег",
		"р▒Ж":  "реЗ",
		"р▒И":  "реИ",
		"р▒К":  "реЛ",
		"р▒М":  "реМ",
		"р░В":  "рдВ",
		"р░Г":  "рдГ",
		"р░Б":  "рдБ",
		"р▒Н":  "реН",
		"р░Х":  "рдХ",
		"р░Ц":  "рдЦ",
		"р░Ч":  "рдЧ",
		"р░Ш":  "рдШ",
		"р░Щ":  "рдЩ",
		"р░Ъ":  "рдЪ",
		"р░Ы":  "рдЫ",
		"р░Ь":  "рдЬ",
		"р░Э":  "рдЭ",
		"р░Ю":  "рдЮ",
		"р░Я":  "рдЯ",
		"р░а":  "рда",
		"р░б":  "рдб",
		"р░в":  "рдв",
		"р░г":  "рдг",
		"р░д":  "рдд",
		"р░е":  "рде",
		"р░ж":  "рдж",
		"р░з":  "рдз",
		"р░и":  "рди",
		"р░к":  "рдк",
		"р░л":  "рдл",
		"р░м":  "рдм",
		"р░н":  "рдн",
		"р░о":  "рдо",
		"р░п":  "рдп",
		"р░░":  "рд░",
		"р░▓":  "рд▓",
		"р░╡":  "рд╡",
		"р░╢":  "рд╢",
		"р░╖":  "рд╖",
		"р░╕":  "рд╕",
		"р░╣":  "рд╣",
		"р░│":  "рд│",
	},
	ml: {
		"ред":  "ред",
		"рее":  "рее",
		"р┤╜":  "рд╜",
		"р┤Ур┤В": "реР",
		"р╡ж":  "реж",
		"р╡з":  "рез",
		"р╡и":  "реи",
		"р╡й":  "рей",
		"р╡к":  "рек",
		"р╡л":  "рел",
		"р╡м":  "рем",
		"р╡н":  "рен",
		"р╡о":  "рео",
		"р╡п":  "реп",
		"р┤Е":  "рдЕ",
		"р┤Ж":  "рдЖ",
		"р┤З":  "рдЗ",
		"р┤И":  "рдИ",
		"р┤Й":  "рдЙ",
		"р┤К":  "рдК",
		"р┤Л":  "рдЛ",
		"р╡а":  "реа",
		"р┤М":  "рдМ",
		"р╡б":  "реб",
		"р┤О":  "рдП",
		"р┤Р":  "рдР",
		"р┤Т":  "рдУ",
		"р┤Ф":  "рдФ",
		"р┤╛":  "рд╛",
		"р┤┐":  "рд┐",
		"р╡А":  "реА",
		"р╡Б":  "реБ",
		"р╡В":  "реВ",
		"р╡Г":  "реГ",
		"р╡Д":  "реД",
		"р╡в":  "рев",
		"р╡г":  "рег",
		"р╡Ж":  "реЗ",
		"р╡И":  "реИ",
		"р╡К":  "реЛ",
		"р╡Ч":  "реМ",
		"р┤В":  "рдВ",
		"р┤Г":  "рдГ",
		"р┤Б":  "рдБ",
		"р╡Н":  "реН",
		"р┤Х":  "рдХ",
		"р┤Ц":  "рдЦ",
		"р┤Ч":  "рдЧ",
		"р┤Ш":  "рдШ",
		"р┤Щ":  "рдЩ",
		"р┤Ъ":  "рдЪ",
		"р┤Ы":  "рдЫ",
		"р┤Ь":  "рдЬ",
		"р┤Э":  "рдЭ",
		"р┤Ю":  "рдЮ",
		"р┤Я":  "рдЯ",
		"р┤а":  "рда",
		"р┤б":  "рдб",
		"р┤в":  "рдв",
		"р┤г":  "рдг",
		"р┤д":  "рдд",
		"р┤е":  "рде",
		"р┤ж":  "рдж",
		"р┤з":  "рдз",
		"р┤и":  "рди",
		"р┤к":  "рдк",
		"р┤л":  "рдл",
		"р┤м":  "рдм",
		"р┤н":  "рдн",
		"р┤о":  "рдо",
		"р┤п":  "рдп",
		"р┤░":  "рд░",
		"р┤▓":  "рд▓",
		"р┤╡":  "рд╡",
		"р┤╢":  "рд╢",
		"р┤╖":  "рд╖",
		"р┤╕":  "рд╕",
		"р┤╣":  "рд╣",
		"р┤│":  "рд│",
	},
	ta: {
		"ред": "ред",
		"рее": "рее",
		"ЁСМ╜": "рд╜",
		"ЁСНР": "реР",
		"рпж": "реж",
		"рпз": "рез",
		"рпи": "реи",
		"рпй": "рей",
		"рпк": "рек",
		"рпл": "рел",
		"рпм": "рем",
		"рпн": "рен",
		"рпо": "рео",
		"рпп": "реп",
		"ЁСМЕ": "рдЕ",
		"ЁСМЖ": "рдЖ",
		"ЁСМЗ": "рдЗ",
		"ЁСМИ": "рдИ",
		"ЁСМЙ": "рдЙ",
		"ЁСМК": "рдК",
		"ЁСМЛ": "рдЛ",
		"ЁСНа": "реа",
		"ЁСММ": "рдМ",
		"ЁСНб": "реб",
		"ЁСМП": "рдП",
		"ЁСМР": "рдР",
		"ЁСМУ": "рдУ",
		"ЁСМФ": "рдФ",
		"ЁСМ╛": "рд╛",
		"ЁСМ┐": "рд┐",
		"ЁСНА": "реА",
		"ЁСНБ": "реБ",
		"ЁСНВ": "реВ",
		"ЁСНГ": "реГ",
		"ЁСНД": "реД",
		"ЁСНв": "рев",
		"ЁСНг": "рег",
		"ЁСНЗ": "реЗ",
		"ЁСНИ": "реИ",
		"ЁСНЛ": "реЛ",
		"ЁСНЧ": "реМ",
		"ЁСМВ": "рдВ",
		"ЁСМГ": "рдГ",
		"ЁСМБ": "рдБ",
		"ЁСНН": "реН",
		"ЁСМХ": "рдХ",
		"ЁСМЦ": "рдЦ",
		"ЁСМЧ": "рдЧ",
		"ЁСМШ": "рдШ",
		"ЁСМЩ": "рдЩ",
		"ЁСМЪ": "рдЪ",
		"ЁСМЫ": "рдЫ",
		"ЁСМЬ": "рдЬ",
		"ЁСМЭ": "рдЭ",
		"ЁСМЮ": "рдЮ",
		"ЁСМЯ": "рдЯ",
		"ЁСМа": "рда",
		"ЁСМб": "рдб",
		"ЁСМв": "рдв",
		"ЁСМг": "рдг",
		"ЁСМд": "рдд",
		"ЁСМе": "рде",
		"ЁСМж": "рдж",
		"ЁСМз": "рдз",
		"ЁСМи": "рди",
		"ЁСМк": "рдк",
		"ЁСМл": "рдл",
		"ЁСМм": "рдм",
		"ЁСМн": "рдн",
		"ЁСМо": "рдо",
		"ЁСМп": "рдп",
		"ЁСМ░": "рд░",
		"ЁСМ▓": "рд▓",
		"ЁСМ╡": "рд╡",
		"ЁСМ╢": "рд╢",
		"ЁСМ╖": "рд╖",
		"ЁСМ╕": "рд╕",
		"ЁСМ╣": "рд╣",
		"ЁСМ│": "рд│",
	},
	sa: {},
}

// devan─Бgar─л to script
var reverseDevan─Бgar─лScriptDict = (func() map[langList]charMap {
	d := map[langList]charMap{}

	for ll, v := range devan─Бgar─лScriptDict {
		m := charMap{}
		for k, v2 := range v {
			m[v2] = k
		}

		d[ll] = m
	}

	return d
})()

func createDevan─Бgar─лToScript(lang langList) func(string) string {
	obj := reverseDevan─Бgar─лScriptDict[lang]
	return func(data string) string {
		var ans []string

		for _, v := range data {
			c := string(v)
			if k, ok := obj[c]; ok {
				ans = append(ans, k)
			}
		}

		return strings.Join(ans, "")
	}
}

func createScriptFunction(lang langList) func(string) string {
	obj := devan─Бgar─лScriptDict[lang]

	return func(s string) string {
		var arr []string

		for _, v := range s {
			l := string(v)

			if k, ok := obj[l]; ok {
				arr = append(arr, k)
				continue
			}

			if _, ok := slices.BinarySearch(
				allowedSymbols,
				l,
			); ok {
				arr = append(arr, l)
			}
		}

		return strings.Join(arr, "")
	}
}

// Convert parsed UAST string to IAST
func dataToIAST(data string) string {
	data = string(
		regexp.
			MustCompile(`[\[\]{}^~@#$%&*_;.<>\n\v\t\r\f]`).
			ReplaceAll([]byte(data), []byte("")),
	)

	var ans []string

	for split := range strings.SplitSeq(data, "\\") {
		if _, ok := charDict[sa].numbers[split]; ok {
			ans = append(ans, split)
			continue
		}

		if v, ok := charDict[sa].misc[split]; ok {
			ans = append(ans, v)
			continue
		}

		if split == "с╕е" || split == "с╣Г" || split == "├г" {
			ans = append(ans, split)
			continue
		}

		var str []string
		for _, v := range split {
			str = append(str, string(v))
		}

		var arr []string
		for i := 0; i < len(str); {
			curr := str[i]

			if curr == "'" {
				// arr = append(arr, "реС")
				i++
				continue
			}

			if curr == "`" {
				// arr = append(arr, "реТ")
				i++
				continue
			}

			if _, ok := slices.BinarySearch(
				allowedSymbols,
				curr,
			); ok {
				arr = append(arr, curr)
				i++
				continue
			}

			var next string
			if i+1 < len(str) {
				next = str[i+1]
			}

			if next == "с╕е" || next == "с╣Г" || next == "├г" {
				if _, ok := charDict[sa].consonants[curr]; ok {
					arr = append(arr, curr+"a"+next)
				} else {
					arr = append(arr, curr+next)
				}

				i += 2
				continue
			}

			if _, ok := charDict[sa].vowels[curr]; ok {
				arr = append(arr, curr)
				i++
				continue
			}

			if i == len(str)-1 {
				if curr == "с╕е" || curr == "с╣Г" || curr == "├г" {
					arr = append(arr, curr)
				} else {
					arr = append(arr, curr+"a")
				}

				i++
				continue
			}

			if _, ok := slices.BinarySearch(unAspiratedConsonants, curr); ok && next == "h" {
				var last string
				if i+2 < len(str) {
					last = str[i+2]
				}

				if _, ok := charDict[sa].vowelSigns[last]; !ok {
					arr = append(arr, curr+next+"a")
					i += 2
					continue
				}

				if last == "с╕е" || last == "с╣Г" || last == "├г" {
					arr = append(arr, curr+next+"a"+last)
					i += 3
					continue
				}

				if last == "-" {
					i += 3
				} else {
					i += 2
				}
				arr = append(arr, curr+next)

				continue
			}

			if next == "-" {
				arr = append(arr, curr)
				i += 2
				continue
			}

			if _, ok := charDict[sa].vowelSigns[next]; ok {
				arr = append(arr, curr)
				i++
				continue
			}

			if curr == "с╕е" || curr == "с╣Г" || curr == "├г" {
				arr = append(arr, curr)
				i++
				continue
			}

			if _, ok := slices.BinarySearch(iastAllowed, curr); !ok {
				i++
				continue
			}

			arr = append(arr, curr+"a")
			i++
		}

		ans = append(ans, strings.Join(arr, ""))
	}

	return strings.Join(ans, "")
}

// Convert IAST to UAST
func iastToUAST(data string) string {
	var str []string
	for _, v := range string(
		regexp.
			MustCompile(`[\[\]{}^~@#$%&*\-_;<>]`).
			ReplaceAll([]byte(data), []byte("")),
	) {
		str = append(str, string(v))
	}

	var arr []string

	for i := 0; i < len(str); {
		curr := str[i]

		var next string
		if i+1 < len(str) {
			next = str[i+1]
		}

		if _, ok := charDict[sa].consonants[curr]; ok {
			if _, ok := slices.BinarySearch(unAspiratedConsonants, curr); ok {
				if next == "a" && (i+2 < len(str) && str[i+2] == "h") {
					arr = append(arr, curr+"a\\")
					i += 2
					continue
				}

				if next == "h" {
					var last string
					if i+2 < len(str) {
						last = str[i+2]
					}

					if _, ok := charDict[sa].consonants[last]; ok {
						arr = append(arr, curr+next+"-")
						i += 2
						continue
					}

					if last == "a" {
						if i+3 < len(str) {
							last = str[i+3]
						}
						if last == "i" || last == "u" {
							arr = append(arr, curr+next+"a"+last)
							i += 4
							continue
						}
						i += 3
					} else {
						i += 2
					}

					arr = append(arr, curr+next)

					continue
				}
			}

			if next == "a" {
				var last string
				if i+2 < len(str) {
					last = str[i+2]
				}

				if last == "i" || last == "u" {
					arr = append(arr, curr+"a"+last)
					i += 3
					continue
				}

				arr = append(arr, curr)
				i += 2
				continue
			}

			if _, ok := charDict[sa].consonants[next]; ok ||
				(next == "." || next == ".." || next == "'") ||
				i == len(str)-1 {
				arr = append(arr, curr+"-")
				i++
				continue
			}

			if next == "├г" {
				arr = append(arr, curr+"-", "├г")
				i += 2
				continue
			}

			arr = append(arr, curr)
			i++
			continue
		}

		if curr == "a" && (next == "i" || next == "u") {
			arr = append(arr, curr+next+"\\")
			i += 2
			continue
		}

		if _, ok := charDict[sa].vowels[curr]; ok {
			if _, ok := charDict[sa].consonants[next]; ok {
				arr = append(arr, curr+"\\")
				i++
				continue
			}
		}

		arr = append(arr, curr)
		i++
	}

	var ans []string

	for k := 0; k < len(arr); k++ {
		curr := arr[k]

		hasDash := strings.Contains(curr, "-")

		curr = strings.ReplaceAll(curr, "\\", "")
		curr = strings.ReplaceAll(curr, "-", "")

		for _, j := range []string{
			".",
			"'",
		} {
			if curr == "." && (k+1 < len(arr) && arr[k+1] == ".") {
				curr = strings.ReplaceAll(curr, curr, "\\/../\\")
				k++
				continue
			}

			curr = strings.ReplaceAll(curr, j, "\\/"+j+"/\\")
		}

		for j := range charDict[sa].numbers {
			curr = strings.ReplaceAll(curr, j, "\\"+j+"\\")
		}

		val := curr

		if _, ok := slices.BinarySearch(unAspiratedConsonants, curr); ok &&
			k+1 < len(arr) && arr[k+1] == "h" {
			val += "a"
		}

		if hasDash {
			val += "-"
		}

		if _, ok := charDict[sa].vowels[curr]; ok {
			val += "\\"
		}

		ans = append(ans, val)
	}

	if len(ans) > 0 && len(str) > 0 {
		if _, ok := charDict[sa].consonants[ans[len(ans)-1]]; ok &&
			str[len(str)-1] != "a" {
			ans = append(ans, "-")
		}
	}

	var final []string

	for _, v := range strings.Join(ans, "") {
		l := string(v)
		if k, ok := iastDataDict[l]; ok {
			final = append(final, "/"+k+"/")
		} else {
			final = append(final, l)
		}
	}

	return strings.Join(final, "")
}

// Function to create the function of parser
func createDataFunction(lang langList) func(string) string {
	obj := charDict[lang]

	return func(data string) string {
		var ans []string

		for split := range strings.SplitSeq(data, "\\") {
			if _, ok := obj.misc[split]; ok {
				ans = append(ans, split)
				continue
			}

			if v, ok := obj.numbers[split]; ok {
				ans = append(ans, v)
				continue
			}

			if v, ok := obj.vowels[split]; ok {
				ans = append(ans, v)
				continue
			}

			var str []string
			for _, v := range split {
				str = append(str, string(v))
			}

			var arr []string
			for i := 0; i < len(str); {
				curr := str[i]

				if lang == sa {
					if curr == "'" {
						arr = append(arr, "реС")
						i++
						continue
					}

					if curr == "`" {
						arr = append(arr, "реТ")
						i++
						continue
					}
				}

				if _, ok := slices.BinarySearch(
					[]string{"!", "\"", "(", ")", ",", ":", "=", "?"},
					curr,
				); ok {
					arr = append(arr, curr)
					i++
					continue
				}

				if _, ok := slices.BinarySearch(unAspiratedConsonants, curr); ok {
					var consonant string
					if i+1 < len(str) && str[i+1] == "h" {
						consonant = strings.Join(str[i:i+2], "")
						i += 2
					} else {
						consonant = curr
						i++
					}

					if v, ok := obj.consonants[consonant]; ok {
						arr = append(arr, v)
					}

					continue
				}

				if v, ok := obj.consonants[curr]; ok {
					arr = append(arr, v)
				}

				var vowel string
				if curr == "a" && (i+1 < len(str) &&
					(str[i+1] == "i" || str[i+1] == "u")) {
					vowel = strings.Join(str[i:i+2], "")
					i += 2
				} else {
					vowel = curr
					i++
				}

				if v, ok := obj.vowelSigns[vowel]; ok {
					arr = append(arr, v)
				}
			}

			ans = append(ans, strings.Join(arr, ""))
		}

		return strings.Join(ans, "")
	}
}

// Convert рджреЗрд╡рдирд╛рдЧрд░реА to UAST
func devan─Бgar─лToUAST(data string) string {
	var str []string
	for _, v := range data {
		str = append(str, string(v))
	}

	var arr []string

	for i := range str {
		curr := str[i]

		var next string
		if i+1 < len(str) {
			next = str[i+1]
		}

		if curr == "реС" {
			arr = append(arr, "\\'")
			continue
		}

		if curr == "реТ" {
			arr = append(arr, "\\`")
			continue
		}

		var val string
		if v, ok := devan─Бgar─лDataDict[curr]; ok {
			val = v
		} else {
			val = curr
		}

		var nextVal string
		if v, ok := devan─Бgar─лDataDict[next]; ok {
			nextVal = v
		} else {
			nextVal = next
		}

		var checkVowel bool
		for _, v := range charDict[sa].vowels {
			if v == curr {
				checkVowel = true
				break
			}
		}

		var checkConsonant bool
		for _, v := range charDict[sa].consonants {
			if v == next {
				checkConsonant = true
				break
			}
		}

		if checkVowel && checkConsonant {
			arr = append(arr, val+"\\")
			continue
		}

		if _, ok := slices.BinarySearch(unAspiratedConsonants, val); ok && nextVal == "h" {
			arr = append(arr, val+"a")
			continue
		}

		arr = append(arr, val)
	}

	return strings.Join(arr, "")
}

// Convert SLP1 to IAST
func slpToIAST(data string) string {
	var str []string
	for _, v := range data {
		if c, ok := slpDataDict[string(v)]; ok {
			str = append(str, c)
		}
	}

	return strings.Join(str, "")
}

type funcList string

const (
	hu funcList = "handleUnicode"
	df funcList = "dataFunction"
	sd funcList = "scriptTodevan─Бgar─л"
	ds funcList = "devan─Бgar─лToScript"
)

type builder = map[langList](map[funcList](func(string) string))

var builderFuncs = func() builder {
	m := make(builder)

	for _, v := range []langList{
		gu,
		sa,
		ml,
		or,
		te,
		kn,
		ta,
	} {
		m[v] = map[funcList]func(string) string{
			df: createDataFunction(v),
			hu: createHandleUnicode(v),
			sd: createScriptFunction(v),
			ds: createDevan─Бgar─лToScript(v),
		}
	}

	return m
}()

var Convertors = map[string](map[string]([]func(string) string)){
	"uast-io": {
		"iast": []func(string) string{
			builderFuncs[sa][hu],
		},
		"devan─Бgar─л": []func(string) string{
			builderFuncs[sa][hu],
			iastToUAST,
			builderFuncs[sa][hu],
			builderFuncs[sa][df],
		},
		"uast": []func(string) string{
			builderFuncs[sa][hu],
			iastToUAST,
		},
		"gu": []func(string) string{
			builderFuncs[gu][hu],
			iastToUAST,
			builderFuncs[gu][hu],
			builderFuncs[gu][df],
		},
		"or": []func(string) string{
			builderFuncs[or][hu],
			iastToUAST,
			builderFuncs[or][hu],
			builderFuncs[or][df],
		},
		"kn": []func(string) string{
			builderFuncs[kn][hu],
			iastToUAST,
			builderFuncs[kn][hu],
			builderFuncs[kn][df],
		},
		"ml": []func(string) string{
			builderFuncs[ml][hu],
			iastToUAST,
			builderFuncs[ml][hu],
			builderFuncs[ml][df],
		},
		"ta": []func(string) string{
			builderFuncs[ta][hu],
			iastToUAST,
			builderFuncs[ta][hu],
			builderFuncs[ta][df],
		},
		"te": []func(string) string{
			builderFuncs[te][hu],
			iastToUAST,
			builderFuncs[te][hu],
			builderFuncs[te][df],
		},
	},
	"uast": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[sa][hu],
			builderFuncs[sa][df],
		},
		"iast": []func(string) string{
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"gu": []func(string) string{
			builderFuncs[gu][hu],
			builderFuncs[gu][df],
		},
		"or": []func(string) string{
			builderFuncs[or][hu],
			builderFuncs[or][df],
		},
		"ta": []func(string) string{
			builderFuncs[ta][hu],
			builderFuncs[ta][df],
		},
		"te": []func(string) string{
			builderFuncs[te][hu],
			builderFuncs[te][df],
		},
		"kn": []func(string) string{
			builderFuncs[kn][hu],
			builderFuncs[kn][df],
		},
		"ml": []func(string) string{
			builderFuncs[ml][hu],
			builderFuncs[ml][df],
		},
	},
	"devan─Бgar─л": {
		"uast": []func(string) string{
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"gu": []func(string) string{
			builderFuncs[gu][ds],
		},
		"or": []func(string) string{
			builderFuncs[or][ds],
		},
		"kn": []func(string) string{
			builderFuncs[kn][ds],
		},
		"te": []func(string) string{
			builderFuncs[te][ds],
		},
		"ta": []func(string) string{
			builderFuncs[ta][ds],
		},
		"ml": []func(string) string{
			builderFuncs[ml][ds],
		},
	},
	"slp": {
		"iast": []func(string) string{
			slpToIAST,
		},
		"uast": []func(string) string{
			slpToIAST,
			iastToUAST,
		},
		"devan─Бgar─л": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[sa][hu],
			builderFuncs[sa][df],
		},
		"gu": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[gu][hu],
			builderFuncs[gu][df],
		},
		"or": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[or][hu],
			builderFuncs[or][df],
		},
		"kn": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[kn][hu],
			builderFuncs[kn][df],
		},
		"ta": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[ta][hu],
			builderFuncs[ta][df],
		},
		"te": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[te][hu],
			builderFuncs[te][df],
		},
		"ml": []func(string) string{
			slpToIAST,
			iastToUAST,
			builderFuncs[ml][hu],
			builderFuncs[ml][df],
		},
	},
	"iast": {
		"uast": []func(string) string{
			iastToUAST,
		},
		"devan─Бgar─л": []func(string) string{
			iastToUAST,
			builderFuncs[sa][hu],
			builderFuncs[sa][df],
		},
		"gu": []func(string) string{
			iastToUAST,
			builderFuncs[gu][hu],
			builderFuncs[gu][df],
		},
		"or": []func(string) string{
			iastToUAST,
			builderFuncs[or][hu],
			builderFuncs[or][df],
		},
		"kn": []func(string) string{
			iastToUAST,
			builderFuncs[kn][hu],
			builderFuncs[kn][df],
		},
		"ta": []func(string) string{
			iastToUAST,
			builderFuncs[ta][hu],
			builderFuncs[ta][df],
		},
		"te": []func(string) string{
			iastToUAST,
			builderFuncs[gu][hu],
			builderFuncs[gu][df],
		},
		"ml": []func(string) string{
			iastToUAST,
			builderFuncs[ml][hu],
			builderFuncs[ml][df],
		},
	},
	"gu": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[gu][sd],
		},
		"uast": []func(string) string{
			builderFuncs[gu][sd],
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			builderFuncs[gu][sd],
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"or": []func(string) string{
			builderFuncs[gu][sd],
			builderFuncs[or][ds],
		},
		"kn": []func(string) string{
			builderFuncs[gu][sd],
			builderFuncs[kn][ds],
		},
		"ta": []func(string) string{
			builderFuncs[gu][sd],
			builderFuncs[ta][ds],
		},
		"te": []func(string) string{
			builderFuncs[gu][sd],
			builderFuncs[te][ds],
		},
		"ml": []func(string) string{
			builderFuncs[gu][sd],
			builderFuncs[ml][ds],
		},
	},
	"or": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[or][sd],
		},
		"uast": []func(string) string{
			builderFuncs[or][sd],
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			builderFuncs[or][sd],
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"gu": []func(string) string{
			builderFuncs[or][sd],
			builderFuncs[gu][ds],
		},
		"kn": []func(string) string{
			builderFuncs[or][sd],
			builderFuncs[kn][sd],
		},
		"ta": []func(string) string{
			builderFuncs[or][sd],
			builderFuncs[ta][ds],
		},
		"te": []func(string) string{
			builderFuncs[or][sd],
			builderFuncs[te][ds],
		},
		"ml": []func(string) string{
			builderFuncs[or][sd],
			builderFuncs[ml][ds],
		},
	},
	"kn": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[kn][sd],
		},
		"uast": []func(string) string{
			builderFuncs[kn][sd],
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			builderFuncs[kn][sd],
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"or": []func(string) string{
			builderFuncs[kn][sd],
			builderFuncs[or][ds],
		},
		"gu": []func(string) string{
			builderFuncs[kn][sd],
			builderFuncs[gu][ds],
		},
		"ta": []func(string) string{
			builderFuncs[kn][sd],
			builderFuncs[ta][ds],
		},
		"te": []func(string) string{
			builderFuncs[kn][sd],
			builderFuncs[te][ds],
		},
		"ml": []func(string) string{
			builderFuncs[kn][sd],
			builderFuncs[ml][ds],
		},
	},
	"te": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[te][sd],
		},
		"uast": []func(string) string{
			builderFuncs[te][sd],
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			builderFuncs[te][sd],
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"or": []func(string) string{
			builderFuncs[te][sd],
			builderFuncs[or][ds],
		},
		"kn": []func(string) string{
			builderFuncs[te][sd],
			builderFuncs[kn][ds],
		},
		"ta": []func(string) string{
			builderFuncs[te][sd],
			builderFuncs[ta][ds],
		},
		"gu": []func(string) string{
			builderFuncs[te][sd],
			builderFuncs[gu][ds],
		},
		"ml": []func(string) string{
			builderFuncs[te][sd],
			builderFuncs[ml][ds],
		},
	},
	"ta": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[ta][sd],
		},
		"uast": []func(string) string{
			builderFuncs[ta][sd],
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			builderFuncs[ta][sd],
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"or": []func(string) string{
			builderFuncs[ta][sd],
			builderFuncs[or][ds],
		},
		"kn": []func(string) string{
			builderFuncs[ta][sd],
			builderFuncs[kn][ds],
		},
		"gu": []func(string) string{
			builderFuncs[ta][sd],
			builderFuncs[gu][ds],
		},
		"te": []func(string) string{
			builderFuncs[ta][sd],
			builderFuncs[te][ds],
		},
		"ml": []func(string) string{
			builderFuncs[ta][sd],
			builderFuncs[ml][ds],
		},
	},
	"ml": {
		"devan─Бgar─л": []func(string) string{
			builderFuncs[ml][sd],
		},
		"uast": []func(string) string{
			builderFuncs[ml][sd],
			devan─Бgar─лToUAST,
		},
		"iast": []func(string) string{
			builderFuncs[ml][sd],
			devan─Бgar─лToUAST,
			builderFuncs[sa][hu],
			dataToIAST,
		},
		"or": []func(string) string{
			builderFuncs[ml][sd],
			builderFuncs[or][ds],
		},
		"kn": []func(string) string{
			builderFuncs[ml][sd],
			builderFuncs[kn][ds],
		},
		"ta": []func(string) string{
			builderFuncs[ml][sd],
			builderFuncs[ta][ds],
		},
		"te": []func(string) string{
			builderFuncs[ml][sd],
			builderFuncs[te][ds],
		},
		"gu": []func(string) string{
			builderFuncs[ml][sd],
			builderFuncs[gu][ds],
		},
	},
}
